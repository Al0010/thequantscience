//@version=6
indicator('Chart Box Session Indicator [The Quant Science]', 
     overlay=true, 
     max_bars_back=1000, 
     max_labels_count=500, 
     max_lines_count=500, 
     max_boxes_count=500
     )

init_content = "'Body to Body' refers to the calculation of the range that includes 'open' and 'close'. 'Wick to Wick' refers to the calculation of the range that includes 'low' and 'high'. Activate one of these functions to calculate the range."
bodytobody = input.bool(defval=true,  title="Body To Body", inline='header', group="RANGE CALCULATION", confirm = true)
wicktowick = input.bool(defval=false, title="Wick To Wick", inline='header', group="RANGE CALCULATION", tooltip=init_content, confirm = true)

session_content = "Please specify the desired timeframe for calculating the price range."
selectedDay_content = "Select the day of the week."
UTC_content = "Select your Coordinated Universal Time (UTC) to align the data."
rangeTime       = input.string(title='Session Time: ', defval='0930-1030', group="SESSION TIME SETTINGS", tooltip=session_content, confirm = true)
selectedDay     = input.string("Monday", title="Select Day of Week ", options=["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], group="SESSION TIME SETTINGS", tooltip = selectedDay_content, confirm = true)
UTC             = input.string(defval='UTC+2', title="Timezone ", group="SESSION TIME SETTINGS", tooltip = UTC_content, confirm = true)

showLines       = input(title='Visualize Price Lines',   defval=true, group="Visual Settings")
showMiddleLine  = input(title='Visualize Middle Price',  defval=true, group="Visual Settings")
extendLines     = input(title='Extended Session',        defval=true, group="Visual Settings")

display_background_content = "Choose from three different configurations; Configuration A is ideal for both dark and light themes. Configuration B is ideal for the dark theme, while Configuration C is for light themes."
display_mode_gradient_content = "Manage the centrality of gradient colors, set a central gradient with 'Centered,' set a non-central gradient by selecting 'Off-Centered."
display_mode_gradient = input.string(defval = "Centered", title = "Display Gradient Mode", group = "Display Configuration", options = ["Centered", "Off-Centered"], tooltip = display_mode_gradient_content)
display_background = input.string(defval = "Gradient A", title = "Display Gradient Type",  group = "Display Configuration", options = ["Gradient A", "Gradient B", "Gradient C"], tooltip = display_background_content)

selectedDayOfWeek =  selectedDay == "Monday"     ? dayofweek.monday     :
                     selectedDay == "Tuesday"    ? dayofweek.tuesday    :
                     selectedDay == "Wednesday"  ? dayofweek.wednesday  :
                     selectedDay == "Thursday"   ? dayofweek.thursday   :
                     selectedDay == "Friday"     ? dayofweek.friday     :
                     selectedDay == "Saturday"   ? dayofweek.saturday   :
                     selectedDay == "Sunday"     ? dayofweek.sunday     :
                     na

inSession = not na(time(timeframe.period, rangeTime, UTC)) and dayofweek(time(timeframe.period)) == selectedDayOfWeek

startTime = 0
startTime := inSession and not inSession[1] ? time : startTime[1] 

//Box lines
var line lowHLine    = na
var line topHLine    = na
var line leftVLine   = na
var line rightVLine  = na
var line middleHLine = na

var box bgBox = na

var box bgBox1  = na
var box bgBox2  = na
var box bgBox3  = na
var box bgBox4  = na
var box bgBox5  = na
var box bgBox6  = na
var box bgBox7  = na
var box bgBox8  = na
var box bgBox9  = na
var box bgBox10 = na

var low_val  = 0.0
var high_val = 0.0

if inSession and not inSession[1] and wicktowick
    low_val  := low
    high_val := high
    high_val
else if inSession and not inSession[1] and bodytobody
    low_val  := open
    high_val := close
    high_val
if not bodytobody and not wicktowick
    low_val  := na
    high_val := na
    high_val

// BackgroundColor A
backgroundColor1a  = display_mode_gradient=="Centered" ? color.rgb(0, 140, 255, 58) : display_mode_gradient=="Off-Centered" ? color.rgb(0, 140, 255, 92) : na
backgroundColor2a  = display_mode_gradient=="Centered" ? color.rgb(0, 140, 255, 68) : display_mode_gradient=="Off-Centered" ? color.rgb(0, 140, 255, 88) : na
backgroundColor3a  = display_mode_gradient=="Centered" ? color.rgb(0, 140, 255, 81) : display_mode_gradient=="Off-Centered" ? color.rgb(0, 140, 255, 81) : na
backgroundColor4a  = display_mode_gradient=="Centered" ? color.rgb(0, 140, 255, 88) : display_mode_gradient=="Off-Centered" ? color.rgb(0, 140, 255, 68) : na 
backgroundColor5a  = display_mode_gradient=="Centered" ? color.rgb(0, 140, 255, 92) : display_mode_gradient=="Off-Centered" ? color.rgb(0, 140, 255, 58) : na 
backgroundColor6a  = display_mode_gradient=="Centered" ? color.rgb(247, 0, 255, 92) : display_mode_gradient=="Off-Centered" ? color.rgb(174, 0, 255, 58) : na 
backgroundColor7a  = display_mode_gradient=="Centered" ? color.rgb(255, 0, 255, 88) : display_mode_gradient=="Off-Centered" ? color.rgb(195, 0, 255, 68) : na 
backgroundColor8a  = display_mode_gradient=="Centered" ? color.rgb(247, 0, 255, 81) : display_mode_gradient=="Off-Centered" ? color.rgb(247, 0, 255, 81) : na 
backgroundColor9a  = display_mode_gradient=="Centered" ? color.rgb(195, 0, 255, 68) : display_mode_gradient=="Off-Centered" ? color.rgb(255, 0, 255, 88) : na
backgroundColor10a = display_mode_gradient=="Centered" ? color.rgb(174, 0, 255, 58) : display_mode_gradient=="Off-Centered" ? color.rgb(255, 0, 255, 92) : na

// BackgroundColor B
backgroundColor1b  = display_mode_gradient=="Centered" ? color.rgb(255, 255, 255, 58) : display_mode_gradient=="Off-Centered" ? color.rgb(255, 255, 255, 92) : na
backgroundColor2b  = display_mode_gradient=="Centered" ? color.rgb(255, 255, 255, 68) : display_mode_gradient=="Off-Centered" ? color.rgb(255, 255, 255, 88) : na
backgroundColor3b  = display_mode_gradient=="Centered" ? color.rgb(255, 255, 255, 81) : display_mode_gradient=="Off-Centered" ? color.rgb(255, 255, 255, 81) : na
backgroundColor4b  = display_mode_gradient=="Centered" ? color.rgb(255, 255, 255, 88) : display_mode_gradient=="Off-Centered" ? color.rgb(255, 255, 255, 68) : na 
backgroundColor5b  = display_mode_gradient=="Centered" ? color.rgb(255, 255, 255, 92) : display_mode_gradient=="Off-Centered" ? color.rgb(255, 255, 255, 58) : na 
backgroundColor6b  = display_mode_gradient=="Centered" ? color.rgb(255, 255, 255, 92) : display_mode_gradient=="Off-Centered" ? color.rgb(255, 255, 255, 58) : na 
backgroundColor7b  = display_mode_gradient=="Centered" ? color.rgb(255, 255, 255, 88) : display_mode_gradient=="Off-Centered" ? color.rgb(255, 255, 255, 68) : na 
backgroundColor8b  = display_mode_gradient=="Centered" ? color.rgb(255, 255, 255, 81) : display_mode_gradient=="Off-Centered" ? color.rgb(255, 255, 255, 81) : na 
backgroundColor9b  = display_mode_gradient=="Centered" ? color.rgb(255, 255, 255, 68) : display_mode_gradient=="Off-Centered" ? color.rgb(255, 255, 255, 88) : na
backgroundColor10b = display_mode_gradient=="Centered" ? color.rgb(255, 255, 255, 58) : display_mode_gradient=="Off-Centered" ? color.rgb(255, 255, 255, 92) : na

// BackgroundColor C
backgroundColor1c  = display_mode_gradient=="Centered" ? color.rgb(29, 29, 29, 58) : display_mode_gradient=="Off-Centered" ? color.rgb(29, 29, 29, 92) : na
backgroundColor2c  = display_mode_gradient=="Centered" ? color.rgb(29, 29, 29, 68) : display_mode_gradient=="Off-Centered" ? color.rgb(29, 29, 29, 88) : na
backgroundColor3c  = display_mode_gradient=="Centered" ? color.rgb(29, 29, 29, 81) : display_mode_gradient=="Off-Centered" ? color.rgb(29, 29, 29, 81) : na
backgroundColor4c  = display_mode_gradient=="Centered" ? color.rgb(29, 29, 29, 88) : display_mode_gradient=="Off-Centered" ? color.rgb(29, 29, 29, 68) : na 
backgroundColor5c  = display_mode_gradient=="Centered" ? color.rgb(29, 29, 29, 92) : display_mode_gradient=="Off-Centered" ? color.rgb(29, 29, 29, 58) : na 
backgroundColor6c  = display_mode_gradient=="Centered" ? color.rgb(29, 29, 29, 92) : display_mode_gradient=="Off-Centered" ? color.rgb(29, 29, 29, 58) : na 
backgroundColor7c  = display_mode_gradient=="Centered" ? color.rgb(29, 29, 29, 88) : display_mode_gradient=="Off-Centered" ? color.rgb(29, 29, 29, 68) : na 
backgroundColor8c  = display_mode_gradient=="Centered" ? color.rgb(29, 29, 29, 81) : display_mode_gradient=="Off-Centered" ? color.rgb(29, 29, 29, 81) : na 
backgroundColor9c  = display_mode_gradient=="Centered" ? color.rgb(29, 29, 29, 68) : display_mode_gradient=="Off-Centered" ? color.rgb(29, 29, 29, 88) : na
backgroundColor10c = display_mode_gradient=="Centered" ? color.rgb(29, 29, 29, 58) : display_mode_gradient=="Off-Centered" ? color.rgb(29, 29, 29, 92) : na

bgcolor1  = display_background=="Gradient A" ? backgroundColor1a  : display_background == "Gradient B" ? backgroundColor1b  : display_background == "Gradient C" ? backgroundColor1c  : na 
bgcolor2  = display_background=="Gradient A" ? backgroundColor2a  : display_background == "Gradient B" ? backgroundColor2b  : display_background == "Gradient C" ? backgroundColor2c  : na  
bgcolor3  = display_background=="Gradient A" ? backgroundColor3a  : display_background == "Gradient B" ? backgroundColor3b  : display_background == "Gradient C" ? backgroundColor3c  : na  
bgcolor4  = display_background=="Gradient A" ? backgroundColor4a  : display_background == "Gradient B" ? backgroundColor4b  : display_background == "Gradient C" ? backgroundColor4c  : na  
bgcolor5  = display_background=="Gradient A" ? backgroundColor5a  : display_background == "Gradient B" ? backgroundColor5b  : display_background == "Gradient C" ? backgroundColor5c  : na  
bgcolor6  = display_background=="Gradient A" ? backgroundColor6a  : display_background == "Gradient B" ? backgroundColor6b  : display_background == "Gradient C" ? backgroundColor6c  : na  
bgcolor7  = display_background=="Gradient A" ? backgroundColor7a  : display_background == "Gradient B" ? backgroundColor7b  : display_background == "Gradient C" ? backgroundColor7c  : na  
bgcolor8  = display_background=="Gradient A" ? backgroundColor8a  : display_background == "Gradient B" ? backgroundColor8b  : display_background == "Gradient C" ? backgroundColor8c  : na  
bgcolor9  = display_background=="Gradient A" ? backgroundColor9a  : display_background == "Gradient B" ? backgroundColor9b  : display_background == "Gradient C" ? backgroundColor9c  : na  
bgcolor10 = display_background=="Gradient A" ? backgroundColor10a : display_background == "Gradient B" ? backgroundColor10b : display_background == "Gradient C" ? backgroundColor10c : na  

linesWidth = 1
boxLineColor = display_background=="Gradient A" ? color.rgb(0, 247, 255) : display_background == "Gradient B" ? color.rgb(255, 254, 254) : display_background == "Gradient C" ? color.rgb(29, 29, 29) : na
middleLineColor = display_background=="Gradient A" ? color.rgb(0, 247, 255, 50) : display_background == "Gradient B" ? color.rgb(255, 255, 255, 50) : display_background == "Gradient C" ? color.rgb(29, 29, 29, 50) : na

var float range_high_low  = 0
var float gradient_step   = 0
var float gradientline1   = 0
var float gradientline2   = 0
var float gradientline3   = 0
var float gradientline4   = 0
var float gradientline5   = 0
var float gradientline6   = 0
var float gradientline7   = 0
var float gradientline8   = 0
var float gradientline9   = 0
var float gradientline10  = 0

// WICK
if inSession and timeframe.isintraday and wicktowick
    if inSession[1]
        line.delete(lowHLine)
        line.delete(topHLine)
        line.delete(leftVLine)
        line.delete(rightVLine)
        line.delete(middleHLine)

        box.delete(bgBox)

        box.delete(bgBox1)
        box.delete(bgBox2)
        box.delete(bgBox3)
        box.delete(bgBox4)
        box.delete(bgBox5)
        box.delete(bgBox6)
        box.delete(bgBox7)
        box.delete(bgBox8)
        box.delete(bgBox9)
        box.delete(bgBox10)

    if low < low_val
        low_val := low
        low_val
    if high > high_val
        high_val := high
        high_val

    range_high_low := high_val - low_val
    gradient_step  := range_high_low/10
    gradientline1  := high_val - (gradient_step * 1)
    gradientline2  := high_val - (gradient_step * 2)
    gradientline3  := high_val - (gradient_step * 3)
    gradientline4  := high_val - (gradient_step * 4)
    gradientline5  := high_val - (gradient_step * 5)
    gradientline6  := high_val - (gradient_step * 6)
    gradientline7  := high_val - (gradient_step * 7)
    gradientline8  := high_val - (gradient_step * 8)
    gradientline9  := high_val - (gradient_step * 9)

    //Create Box
    bgBox1  := box.new(startTime, high_val, time, gradientline1, xloc=xloc.bar_time, bgcolor=bgcolor1, border_width=0)
    bgBox2  := box.new(startTime, gradientline1, time, gradientline2,  xloc=xloc.bar_time, bgcolor=bgcolor2,  border_width=0)
    bgBox3  := box.new(startTime, gradientline2, time, gradientline3,  xloc=xloc.bar_time, bgcolor=bgcolor3,  border_width=0)
    bgBox4  := box.new(startTime, gradientline3, time, gradientline4,  xloc=xloc.bar_time, bgcolor=bgcolor4,  border_width=0)
    bgBox5  := box.new(startTime, gradientline4, time, gradientline5,  xloc=xloc.bar_time, bgcolor=bgcolor5,  border_width=0)
    bgBox6  := box.new(startTime, gradientline5, time, gradientline6,  xloc=xloc.bar_time, bgcolor=bgcolor6,  border_width=0)
    bgBox7  := box.new(startTime, gradientline6, time, gradientline7,  xloc=xloc.bar_time, bgcolor=bgcolor7,  border_width=0)
    bgBox8  := box.new(startTime, gradientline7, time, gradientline8,  xloc=xloc.bar_time, bgcolor=bgcolor8,  border_width=0)
    bgBox9  := box.new(startTime, gradientline8, time, gradientline9,  xloc=xloc.bar_time, bgcolor=bgcolor9,  border_width=0)
    bgBox10 := box.new(startTime, gradientline9, time, low_val, xloc=xloc.bar_time, bgcolor=bgcolor10, border_width=0)

    if showLines
        lowHLine   := line.new(startTime, low_val, time, low_val, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)
        topHLine   := line.new(startTime, high_val, time, high_val, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)

    if showMiddleLine
        middleHLine := line.new(startTime, (high_val + low_val) / 2, time, (high_val + low_val) / 2, xloc=xloc.bar_time, color=middleLineColor, style=line.style_dotted, width=linesWidth)
else
    if extendLines and not inSession and timeframe.isintraday
        time1 = line.get_x1(lowHLine)
        time2 = line.get_x2(lowHLine)
        price = line.get_y1(lowHLine)
        line.delete(lowHLine)
        lowHLine := line.new(time1, price, time, price, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)
        
        time1 := line.get_x1(topHLine)
        time2 := line.get_x2(topHLine)
        price := line.get_y1(topHLine)
        line.delete(topHLine)
        topHLine := line.new(time1, price, time, price, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)

        time1 := line.get_x1(middleHLine)
        time2 := line.get_x2(middleHLine)
        price := line.get_y1(middleHLine)
        line.delete(middleHLine)
        middleHLine := line.new(time1, price, time, price, xloc=xloc.bar_time, color=middleLineColor, style=line.style_dotted, width=linesWidth)
        middleHLine

        box.delete(bgBox)
        box.delete(bgBox1)
        box.delete(bgBox2)
        box.delete(bgBox3)
        box.delete(bgBox4)
        box.delete(bgBox5)
        box.delete(bgBox6)
        box.delete(bgBox7)
        box.delete(bgBox8)
        box.delete(bgBox9)
        box.delete(bgBox10)

        bgBox1  := box.new(startTime, high_val, time, gradientline1, xloc=xloc.bar_time, bgcolor=bgcolor1, border_width=0)
        bgBox2  := box.new(startTime, gradientline1, time, gradientline2,  xloc=xloc.bar_time, bgcolor=bgcolor2,  border_width=0)
        bgBox3  := box.new(startTime, gradientline2, time, gradientline3,  xloc=xloc.bar_time, bgcolor=bgcolor3,  border_width=0)
        bgBox4  := box.new(startTime, gradientline3, time, gradientline4,  xloc=xloc.bar_time, bgcolor=bgcolor4,  border_width=0)
        bgBox5  := box.new(startTime, gradientline4, time, gradientline5,  xloc=xloc.bar_time, bgcolor=bgcolor5,  border_width=0)
        bgBox6  := box.new(startTime, gradientline5, time, gradientline6,  xloc=xloc.bar_time, bgcolor=bgcolor6,  border_width=0)
        bgBox7  := box.new(startTime, gradientline6, time, gradientline7,  xloc=xloc.bar_time, bgcolor=bgcolor7,  border_width=0)
        bgBox8  := box.new(startTime, gradientline7, time, gradientline8,  xloc=xloc.bar_time, bgcolor=bgcolor8,  border_width=0)
        bgBox9  := box.new(startTime, gradientline8, time, gradientline9,  xloc=xloc.bar_time, bgcolor=bgcolor9,  border_width=0)
        bgBox10 := box.new(startTime, gradientline9, time, low_val, xloc=xloc.bar_time, bgcolor=bgcolor10, border_width=0)

// BODY
if inSession and timeframe.isintraday and bodytobody
    if inSession[1]
        line.delete(lowHLine)
        line.delete(topHLine)
        line.delete(leftVLine)
        line.delete(rightVLine)
        line.delete(middleHLine)

        box.delete(bgBox)

        box.delete(bgBox1)
        box.delete(bgBox2)
        box.delete(bgBox3)
        box.delete(bgBox4)
        box.delete(bgBox5)
        box.delete(bgBox6)
        box.delete(bgBox7)
        box.delete(bgBox8)
        box.delete(bgBox9)
        box.delete(bgBox10)

    if open < low_val
        low_val := open
        low_val
    if close > high_val
        high_val := close
        high_val

    range_high_low := high_val - low_val
    gradient_step  := range_high_low/10
    gradientline1  := high_val - (gradient_step * 1)
    gradientline2  := high_val - (gradient_step * 2)
    gradientline3  := high_val - (gradient_step * 3)
    gradientline4  := high_val - (gradient_step * 4)
    gradientline5  := high_val - (gradient_step * 5)
    gradientline6  := high_val - (gradient_step * 6)
    gradientline7  := high_val - (gradient_step * 7)
    gradientline8  := high_val - (gradient_step * 8)
    gradientline9  := high_val - (gradient_step * 9)

    bgBox1  := box.new(startTime, high_val, time, gradientline1, xloc=xloc.bar_time, bgcolor=bgcolor1, border_width=0)
    bgBox2  := box.new(startTime, gradientline1, time, gradientline2,  xloc=xloc.bar_time, bgcolor=bgcolor2,  border_width=0)
    bgBox3  := box.new(startTime, gradientline2, time, gradientline3,  xloc=xloc.bar_time, bgcolor=bgcolor3,  border_width=0)
    bgBox4  := box.new(startTime, gradientline3, time, gradientline4,  xloc=xloc.bar_time, bgcolor=bgcolor4,  border_width=0)
    bgBox5  := box.new(startTime, gradientline4, time, gradientline5,  xloc=xloc.bar_time, bgcolor=bgcolor5,  border_width=0)
    bgBox6  := box.new(startTime, gradientline5, time, gradientline6,  xloc=xloc.bar_time, bgcolor=bgcolor6,  border_width=0)
    bgBox7  := box.new(startTime, gradientline6, time, gradientline7,  xloc=xloc.bar_time, bgcolor=bgcolor7,  border_width=0)
    bgBox8  := box.new(startTime, gradientline7, time, gradientline8,  xloc=xloc.bar_time, bgcolor=bgcolor8,  border_width=0)
    bgBox9  := box.new(startTime, gradientline8, time, gradientline9,  xloc=xloc.bar_time, bgcolor=bgcolor9,  border_width=0)
    bgBox10 := box.new(startTime, gradientline9, time, low_val, xloc=xloc.bar_time, bgcolor=bgcolor10, border_width=0)

    if showLines
        lowHLine   := line.new(startTime, low_val,  time, low_val,  xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)
        topHLine   := line.new(startTime, high_val, time, high_val, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)

    if showMiddleLine
        middleHLine := line.new(startTime, (high_val + low_val) / 2, time, (high_val + low_val) / 2, xloc=xloc.bar_time, color=middleLineColor, style=line.style_dotted, width=linesWidth)
else
    if extendLines and not inSession and timeframe.isintraday
        time1 = line.get_x1(lowHLine)
        time2 = line.get_x2(lowHLine)
        price = line.get_y1(lowHLine)
        line.delete(lowHLine)
        lowHLine := line.new(time1, price, time, price, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)
        
        time1 := line.get_x1(topHLine)
        time2 := line.get_x2(topHLine)
        price := line.get_y1(topHLine)
        line.delete(topHLine)
        topHLine := line.new(time1, price, time, price, xloc=xloc.bar_time, color=boxLineColor, style=line.style_solid, width=linesWidth)

        time1 := line.get_x1(middleHLine)
        time2 := line.get_x2(middleHLine)
        price := line.get_y1(middleHLine)
        line.delete(middleHLine)
        middleHLine := line.new(time1, price, time, price, xloc=xloc.bar_time, color=middleLineColor, style=line.style_dotted, width=linesWidth)
        middleHLine

        box.delete(bgBox)

        box.delete(bgBox1)
        box.delete(bgBox2)
        box.delete(bgBox3)
        box.delete(bgBox4)
        box.delete(bgBox5)
        box.delete(bgBox6)
        box.delete(bgBox7)
        box.delete(bgBox8)
        box.delete(bgBox9)
        box.delete(bgBox10)
        
        bgBox1  := box.new(startTime, high_val, time, gradientline1, xloc=xloc.bar_time, bgcolor=bgcolor1, border_width=0)
        bgBox2  := box.new(startTime, gradientline1, time, gradientline2,  xloc=xloc.bar_time, bgcolor=bgcolor2,  border_width=0)
        bgBox3  := box.new(startTime, gradientline2, time, gradientline3,  xloc=xloc.bar_time, bgcolor=bgcolor3,  border_width=0)
        bgBox4  := box.new(startTime, gradientline3, time, gradientline4,  xloc=xloc.bar_time, bgcolor=bgcolor4,  border_width=0)
        bgBox5  := box.new(startTime, gradientline4, time, gradientline5,  xloc=xloc.bar_time, bgcolor=bgcolor5,  border_width=0)
        bgBox6  := box.new(startTime, gradientline5, time, gradientline6,  xloc=xloc.bar_time, bgcolor=bgcolor6,  border_width=0)
        bgBox7  := box.new(startTime, gradientline6, time, gradientline7,  xloc=xloc.bar_time, bgcolor=bgcolor7,  border_width=0)
        bgBox8  := box.new(startTime, gradientline7, time, gradientline8,  xloc=xloc.bar_time, bgcolor=bgcolor8,  border_width=0)
        bgBox9  := box.new(startTime, gradientline8, time, gradientline9,  xloc=xloc.bar_time, bgcolor=bgcolor9,  border_width=0)
        bgBox10 := box.new(startTime, gradientline9, time, low_val, xloc=xloc.bar_time, bgcolor=bgcolor10, border_width=0)
